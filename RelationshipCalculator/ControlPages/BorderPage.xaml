<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Class="AppUIBasics.ControlPages.BorderPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:AppUIBasics.ControlPages"
    xmlns:common="using:AppUIBasics.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <Page.Resources>
    </Page.Resources>

    <RelativePanel>
        <local:ControlExample x:Name="Example1" HeaderText="A Border around a TextBlock." MaxWidth="500">
            <Border x:Name="Control1" Grid.Row="1" BorderThickness="2" BorderBrush="#FFFFD700" Background="#FFFFFFFF" Margin="0,0,0,10">
                <TextBlock Text="Text inside a border" FontSize="18" Foreground="Black"/>
            </Border>
            <local:ControlExample.Xaml>
                <RichTextBlock>
                    <Paragraph>&lt;Border BorderThickness="<Run Text="{x:Bind Control1.BorderThickness.Top, Mode=OneWay}"/>" 
                                BorderBrush="<Run Text="{x:Bind Control1.BorderBrush.(SolidColorBrush.Color), Converter={StaticResource colorStringConverter}, Mode=OneWay}"/>" 
                                Background="<Run Text="{x:Bind Control1.Background.(SolidColorBrush.Color), Converter={StaticResource colorStringConverter}, Mode=OneWay}"/>"&gt;
                    </Paragraph>
                    <Paragraph TextIndent="12">&lt;TextBlock Text="Text inside a border" FontSize="18" Foreground="Black"/&gt;</Paragraph>
                    <Paragraph>&lt;/Border&gt;</Paragraph>
                </RichTextBlock>
            </local:ControlExample.Xaml>
        </local:ControlExample>

        <local:ControlExample x:Name="ExampleAccessories" HeaderText="Use the slider and radio buttons to change the border.">
            <StackPanel>
                <Slider x:Name="ThicknessSlider" Header="BorderThickness" Minimum="0" Maximum="10" StepFrequency="1" Value="2" Width="200" 
                        ValueChanged="ThicknessSlider_ValueChanged" HorizontalAlignment="Left"/>

                <TextBlock Text="Background" Style="{ThemeResource CaptionTextBlockStyle}"/>
                <StackPanel Orientation="Horizontal">
                    <RadioButton Content="Green" Tag="Green" GroupName="BGColor" Checked="BGRadioButton_Checked"/>
                    <RadioButton Content="Yellow" Tag="Yellow" GroupName="BGColor" Checked="BGRadioButton_Checked" Margin="-24,0,0,0" />
                    <RadioButton Content="Blue" Tag="Blue" GroupName="BGColor" Checked="BGRadioButton_Checked" Margin="-24,0,0,0" />
                    <RadioButton Content="White" Tag="White" GroupName="BGColor" Checked="BGRadioButton_Checked" IsChecked="True" Margin="-24,0,0,0" />
                </StackPanel>

                <TextBlock Text="BorderBrush" Style="{ThemeResource CaptionTextBlockStyle}"/>
                <StackPanel Orientation="Horizontal">
                    <RadioButton Content="Green" Tag="Green" GroupName="BorderBrush" Checked="RadioButton_Checked"/>
                    <RadioButton Content="Yellow" Tag="Yellow" GroupName="BorderBrush" Checked="RadioButton_Checked" IsChecked="True" Margin="-24,0,0,0" />
                    <RadioButton Content="Blue" Tag="Blue" GroupName="BorderBrush" Checked="RadioButton_Checked" Margin="-24,0,0,0" />
                    <RadioButton Content="White" Tag="White" GroupName="BorderBrush" Checked="RadioButton_Checked" Margin="-24,0,0,0" />
                </StackPanel>
            </StackPanel>
        </local:ControlExample>

        <VisualStateManager.VisualStateGroups>
            <!-- Visual states reflect the application's window size -->
            <VisualStateGroup>
                <VisualState x:Name="WideLayout">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="900" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="Example1.(RelativePanel.RightOf)" Value="ExampleAccessories" />
                        <Setter Target="Example1.Margin" Value="24,0,0,0" />
                    </VisualState.Setters>
                </VisualState>

                <VisualState x:Name="NarrowLayout">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="Example1.(RelativePanel.Below)" Value="ExampleAccessories" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </RelativePanel>
</Page>